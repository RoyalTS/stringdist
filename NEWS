version 0.7.0
- added useBytes option: up to ~3-fold speed gain at the cost of possible encoding-dependent results.
- new memory allocation method for q-grams increases speed between ~5% and ~30% depending on q and input string.
- function 'qgrams' gains useNames option.
- jaro-winkler distance gains weight argument.
- C-code optimization in edit-based distances:  10~20% speed increase depending on input.
- bugfix in amatch: sometimes NA was erroneously returned.
- bugfix in amatch/lcs: hamming distance method was called erroneously.

version 0.6.1
- bugfix in parallel version of stringdistmatrix: parameter p was not passed (thanks to Ricardo Saporta)
- bugfix in lv/osa/dl: maxDist ignored in certain cases

version 0.6.0
- added amatch function: approximate matching version of 'match'
- added ain function: approximate matching version of '%in%'
- qgrams now accepts arbitrary number of arguments. Outputs array, not table
- added cosine distance
- added Jaccard distance
- added Jaro and Jaro-Winkler distances
- small performance tweeks in underlying C code
- Edge case in stringdistmatrix: output is now always of class matrix
- Default maxDist is now Inf (this is only to make it more intuitive and does not break previous code)
- BREAKING CHANGE: output -1 is replaced by Inf for all distance methods


version 0.5.0
- added qgram counting function 'qgrams'
- faster edge case handling in osa method.
- edge case in lv/osa/dl methods: distance returned length(b) in stead of -1 when length(a) == 0, maxDist < length(b).
- bugfix in lv/osa/dl method: maxDist returned when length(a) > maxDist > 0 (thanks to Daniel Reckhard).
- Hamming distance (method='h') now returns -1 for strings of unequal lengts (used to emit error).
- added longest common substring distance (method='lcs').
- added qgram distance method.
- stringdistmatrix gains cluster argument.

version 0.4.2
- Fix in error message for hamming distance
- Workaround for system-dependent translation of utf8 NA characters

version 0.4.0
- First release
